// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  profile   String?
  email     String   @unique
  password  String

  multiFA    Boolean @default(false)

  role          ROLE?     @default(USER)
  userinfo      Userinfo?
  preferences   UserPreferences?
  Achievements  UserAchievement[]
  Player        Player? // this will represent you in multiplayer

  Biometrics UserBiometric?
  completedChallenges ChallengeCompleted[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Userinfo {
  id           String   @id @default(cuid())
  userId       String   @unique

  bio          String?
  location     String?
  socialMedias String[]    

  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique

  privateProfile    Boolean @default(false)
  showStats         Boolean @default(true)

  theme             String   @default("light")
  fontSize          Int   @default(16)
  soundEffects      Boolean @default(true)
  keyboardLayout    String   @default("qwerty")

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBiometric {
  id        String   @id @default(cuid())
  userId    String   @unique

  AverageWpm        Int
  AverageAccuracy   Int
  // format `${hours}h ${minutes}m ${seconds}s`
  TimePracticed     String  @default("0h 0m 0s") 

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// this is used for email verification and multi factor authentication
model EmailTokens {
  id        String   @id @default(cuid())
  userId    String    @unique
  token     String  
  expiresAt DateTime 
}

// use crons job to delete this later on
model Refreshtoken {
  id        String   @id @default(cuid())
  
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime 
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum ChallengeCategory {
  Featured
  Daily
  Practice
}

// this is the keyboard challenge that they need to type
model Challenge {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  challenge   String   @unique
  difficulty  Difficulty

  category    ChallengeCategory
  userCompleted ChallengeCompleted[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChallengeCompleted {
  id            String @id @default(cuid())
  challengeId   String
  userId        String 

  typed         String
  accuracy      Int
  wpm           Int
  time          Int

  userInfo      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge     Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  dateCompleted          DateTime @default(now())
  @@unique([challengeId, userId])
}

enum AchievementCategory {
  WPM
  Accuracy
  Challenges
}

enum TaskType {
  Process
  Milestone
}

model GlobalAchievements {
  id          String @id @default(cuid())
  name        String
  description String
  goal        Int
  taskType    TaskType

  // Occurrence specifies how many times the user must meet the condition if the achievement is cumulative
  occurrence  Int?   // Optional, only used for "Process" achievements
  
  category    AchievementCategory
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String @id @default(cuid())
  userId        String 
  achievementId String
  isFinished    Boolean @default(false) // this will check if the task is already finish

  progress      Int     @default(0)
  
  achievement   GlobalAchievements @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateFinished  DateTime?
  @@unique([userId, achievementId])
}

model Room {
  id          String @id @default(cuid())
  challengeId String
  roomStatus  String @default("waiting") // 'waiting', 'playing', 'finished'

  name        String
  hostId      String

  players     Player[] @relation("RoomPlayers")
  createdAt   DateTime  @default(now())
}

model Player {
  id        String @id @default(cuid())
  username  String
  Ready     Boolean? @default(false)
  
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])

  roomId    String?
  room      Room?  @relation("RoomPlayers", fields: [roomId], references: [id])

  invitationsSent     Invitation[] @relation("Sender")
  invitationsReceived Invitation[] @relation("Receiver")
}

model Invitation {
  id        String @id @default(cuid())
  roomId    String
  senderId  String
  receiverId String

  user      Player   @relation("Sender", fields: [senderId], references: [id])
  receiver  Player   @relation("Receiver", fields: [receiverId], references: [id])

  status    String @default("pending") // 'pending', 'accepted', 'declined'

  createdAt DateTime @default(now())
}